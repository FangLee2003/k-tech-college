'use client';

import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import type { Task } from '../../../types';
import { createTask } from '@/services/tasks';
import { useRouter } from 'next/navigation';

// Form data interface (excluding auto-generated fields)
interface TaskFormData {
  title: string;
  start_date: string;
  due_date?: string;
  description?: string;
  status: 'to_do' | 'in_progress' | 'done';
  priority: 'low' | 'medium' | 'high';
  assignee_id?: number;
}

// Yup validation schema
const validationSchema: yup.ObjectSchema<TaskFormData> = yup.object({
  title: yup
    .string()
    .required('Title is required')
    .min(3, 'Title must be at least 3 characters')
    .max(100, 'Title must be less than 100 characters'),
  start_date: yup
    .string()
    .required('Start date is required')
    .matches(/^\d{4}-\d{2}-\d{2}$/, 'Please enter a valid date'),
  due_date: yup
    .string()
    .optional()
    .matches(/^\d{4}-\d{2}-\d{2}$/, 'Please enter a valid date')
    .test('due_date-after-start_date', 'Due date must be after start date', function (value) {
      if (!value) return true;
      const { start_date } = this.parent;
      return new Date(value) >= new Date(start_date);
    }),
  description: yup.string().optional().max(500, 'Description must be less than 500 characters'),
  status: yup
    .mixed<'to_do' | 'in_progress' | 'done'>()
    .required('Status is required')
    .oneOf(['to_do', 'in_progress', 'done'], 'Please select a valid status'),
  priority: yup
    .mixed<'low' | 'medium' | 'high'>()
    .required('Priority is required')
    .oneOf(['low', 'medium', 'high'], 'Please select a valid priority'),
  assignee_id: yup
    .number()
    .transform((value, originalValue) => {
      // Convert empty string to undefined
      return originalValue === '' ? undefined : value;
    })
    .optional()
    .min(1, 'Assignee ID cannot be empty if provided'),
});

export default function CreateTask() {
  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting, isValid, dirtyFields },
    reset,
  } = useForm<TaskFormData>({
    resolver: yupResolver(validationSchema),
    mode: 'onChange',
    defaultValues: {
      title: '',
      start_date: new Date().toISOString().split('T')[0],
      due_date: '',
      description: '',
      status: 'to_do',
      priority: 'medium',
      assignee_id: undefined,
    },
  });

  const onSubmit = async (data: TaskFormData): Promise<void> => {
    try {
      // Convert form data to Task object
      const taskData: Task = {
        id: undefined, // ID will be generated by the server
        title: data.title,
        start_date: new Date(data.start_date),
        due_date: data.due_date ? new Date(data.due_date) : undefined,
        description: data.description || undefined,
        status: data.status,
        priority: data.priority,
        assignee_id: data.assignee_id,
        completed_date: data.status === 'done' ? new Date() : undefined,
        created_time: new Date(),
        updated_time: new Date(),
      };

      // Call API to create task
      await createTask(taskData);

      router.push('/tasks');

      // Reset form
      reset();
      alert('Task created successfully!');
    } catch (error) {
      console.error('Error creating task:', error);
      alert('Failed to create task. Please try again.');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-cyan-50 p-6">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent mb-2">
            Create New Task
          </h1>
          <p className="text-gray-600 text-lg">Add a new task to your workflow</p>
        </div>

        {/* Form Container */}
        <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 overflow-hidden hover:shadow-2xl transition-all duration-300">
          <div className="bg-gradient-to-r from-blue-500 to-cyan-500 p-1">
            <div className="bg-white rounded-xl p-8">
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
                {/* Title Field */}
                <div className="space-y-2">
                  <label htmlFor="title" className="block text-sm font-bold text-gray-700">
                    <span className="flex items-center space-x-2">
                      <span>üìù</span>
                      <span>Title</span>
                      <span className="text-red-500">*</span>
                    </span>
                  </label>
                  <input
                    type="text"
                    id="title"
                    {...register('title')}
                    className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-4 transition-all duration-200 ${errors.title
                        ? 'border-red-300 focus:border-red-500 focus:ring-red-200 bg-red-50'
                        : !errors.title && dirtyFields.title
                          ? 'border-green-300 focus:border-green-500 focus:ring-green-200 bg-green-50'
                          : 'border-gray-200 focus:border-blue-500 focus:ring-blue-200 bg-gray-50'
                      }`}
                    placeholder="Enter a descriptive task title"
                  />
                  {errors.title && <p className="text-red-500 text-sm flex items-center space-x-1">
                    <span>‚ö†Ô∏è</span>
                    <span>{errors.title.message}</span>
                  </p>}
                </div>

                {/* Start Date and Due Date Row */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Start Date */}
                  <div className="space-y-2">
                    <label htmlFor="start_date" className="block text-sm font-bold text-gray-700">
                      <span className="flex items-center space-x-2">
                        <span>üìÖ</span>
                        <span>Start Date</span>
                        <span className="text-red-500">*</span>
                      </span>
                    </label>
                    <input
                      type="date"
                      id="start_date"
                      {...register('start_date')}
                      className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-4 transition-all duration-200 ${errors.start_date
                          ? 'border-red-300 focus:border-red-500 focus:ring-red-200 bg-red-50'
                          : !errors.start_date && dirtyFields.start_date
                            ? 'border-green-300 focus:border-green-500 focus:ring-green-200 bg-green-50'
                            : 'border-gray-200 focus:border-blue-500 focus:ring-blue-200 bg-gray-50'
                        }`}
                    />
                    {errors.start_date && <p className="text-red-500 text-sm flex items-center space-x-1">
                      <span>‚ö†Ô∏è</span>
                      <span>{errors.start_date.message}</span>
                    </p>}
                  </div>

                  {/* Due Date */}
                  <div className="space-y-2">
                    <label htmlFor="due_date" className="block text-sm font-bold text-gray-700">
                      <span className="flex items-center space-x-2">
                        <span>‚è∞</span>
                        <span>Due Date</span>
                      </span>
                    </label>
                    <input
                      type="date"
                      id="due_date"
                      {...register('due_date')}
                      className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-4 transition-all duration-200 ${errors.due_date
                          ? 'border-red-300 focus:border-red-500 focus:ring-red-200 bg-red-50'
                          : !errors.due_date && dirtyFields.due_date
                            ? 'border-green-300 focus:border-green-500 focus:ring-green-200 bg-green-50'
                            : 'border-gray-200 focus:border-blue-500 focus:ring-blue-200 bg-gray-50'
                        }`}
                    />
                    {errors.due_date && <p className="text-red-500 text-sm flex items-center space-x-1">
                      <span>‚ö†Ô∏è</span>
                      <span>{errors.due_date.message}</span>
                    </p>}
                  </div>
                </div>

                {/* Status and Priority Row */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Status */}
                  <div className="space-y-2">
                    <label htmlFor="status" className="block text-sm font-bold text-gray-700">
                      <span className="flex items-center space-x-2">
                        <span>üîÑ</span>
                        <span>Status</span>
                        <span className="text-red-500">*</span>
                      </span>
                    </label>
                    <select
                      id="status"
                      {...register('status')}
                      className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-4 transition-all duration-200 ${errors.status
                          ? 'border-red-300 focus:border-red-500 focus:ring-red-200 bg-red-50'
                          : !errors.status && dirtyFields.status
                            ? 'border-green-300 focus:border-green-500 focus:ring-green-200 bg-green-50'
                            : 'border-gray-200 focus:border-blue-500 focus:ring-blue-200 bg-gray-50'
                        }`}
                    >
                      <option value="to_do">üìã To Do</option>
                      <option value="in_progress">üîÑ In Progress</option>
                      <option value="done">‚úÖ Done</option>
                    </select>
                    {errors.status && <p className="text-red-500 text-sm flex items-center space-x-1">
                      <span>‚ö†Ô∏è</span>
                      <span>{errors.status.message}</span>
                    </p>}
                  </div>

                  {/* Priority */}
                  <div className="space-y-2">
                    <label htmlFor="priority" className="block text-sm font-bold text-gray-700">
                      <span className="flex items-center space-x-2">
                        <span>‚ö°</span>
                        <span>Priority</span>
                        <span className="text-red-500">*</span>
                      </span>
                    </label>
                    <select
                      id="priority"
                      {...register('priority')}
                      className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-4 transition-all duration-200 ${errors.priority
                          ? 'border-red-300 focus:border-red-500 focus:ring-red-200 bg-red-50'
                          : !errors.priority && dirtyFields.priority
                            ? 'border-green-300 focus:border-green-500 focus:ring-green-200 bg-green-50'
                            : 'border-gray-200 focus:border-blue-500 focus:ring-blue-200 bg-gray-50'
                        }`}
                    >
                      <option value="low">üü¢ Low</option>
                      <option value="medium">üü° Medium</option>
                      <option value="high">üî¥ High</option>
                    </select>
                    {errors.priority && <p className="text-red-500 text-sm flex items-center space-x-1">
                      <span>‚ö†Ô∏è</span>
                      <span>{errors.priority.message}</span>
                    </p>}
                  </div>
                </div>

                {/* Description Field */}
                <div className="space-y-2">
                  <label htmlFor="description" className="block text-sm font-bold text-gray-700">
                    <span className="flex items-center space-x-2">
                      <span>üìÑ</span>
                      <span>Description</span>
                    </span>
                  </label>
                  <textarea
                    id="description"
                    rows={4}
                    {...register('description')}
                    className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-4 transition-all duration-200 resize-none ${errors.description
                        ? 'border-red-300 focus:border-red-500 focus:ring-red-200 bg-red-50'
                        : !errors.description && dirtyFields.description
                          ? 'border-green-300 focus:border-green-500 focus:ring-green-200 bg-green-50'
                          : 'border-gray-200 focus:border-blue-500 focus:ring-blue-200 bg-gray-50'
                      }`}
                    placeholder="Describe the task in detail (optional)"
                  />
                  {errors.description && <p className="text-red-500 text-sm flex items-center space-x-1">
                    <span>‚ö†Ô∏è</span>
                    <span>{errors.description.message}</span>
                  </p>}
                </div>

                {/* Assignee ID Field */}
                <div className="space-y-2">
                  <label htmlFor="assignee_id" className="block text-sm font-bold text-gray-700">
                    <span className="flex items-center space-x-2">
                      <span>üë§</span>
                      <span>Assignee ID</span>
                    </span>
                  </label>
                  <input
                    type="number"
                    id="assignee_id"
                    {...register('assignee_id')}
                    className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-4 transition-all duration-200 ${errors.assignee_id
                        ? 'border-red-300 focus:border-red-500 focus:ring-red-200 bg-red-50'
                        : !errors.assignee_id && dirtyFields.assignee_id
                          ? 'border-green-300 focus:border-green-500 focus:ring-green-200 bg-green-50'
                          : 'border-gray-200 focus:border-blue-500 focus:ring-blue-200 bg-gray-50'
                      }`}
                    placeholder="Enter assignee ID (optional)"
                  />
                  {errors.assignee_id && <p className="text-red-500 text-sm flex items-center space-x-1">
                    <span>‚ö†Ô∏è</span>
                    <span>{errors.assignee_id.message}</span>
                  </p>}
                </div>

                {/* Submit Button */}
                <div className="flex justify-end space-x-4 pt-6">
                  <button
                    type="button"
                    onClick={() => reset()}
                    className="px-8 py-3 border-2 border-gray-300 rounded-xl text-gray-700 bg-gray-50 hover:bg-gray-100 transition-all duration-200 font-medium hover:shadow-md"
                  >
                    üîÑ Reset
                  </button>
                  <button
                    type="submit"
                    disabled={isSubmitting || !isValid}
                    className={`px-8 py-3 rounded-xl font-medium transition-all duration-200 ${isSubmitting || !isValid
                        ? 'bg-gray-300 cursor-not-allowed text-gray-500'
                        : 'bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white shadow-lg hover:shadow-xl transform hover:scale-105'
                      }`}
                  >
                    {isSubmitting ? '‚è≥ Creating...' : '‚ú® Create Task'}
                  </button>
                </div>

                {/* Form Status */}
                <div className="text-center pt-4">
                  <div className={`inline-flex items-center space-x-2 px-4 py-2 rounded-full ${isValid ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
                    }`}>
                    <span>{isValid ? '‚úÖ' : '‚ùå'}</span>
                    <span className="text-sm font-medium">
                      {isValid ? 'Form is valid' : 'Please fill in all required fields correctly'}
                    </span>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}